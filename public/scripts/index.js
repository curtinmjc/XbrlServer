// Generated by CoffeeScript 1.9.2
(function() {
  var a2a_config, chart, cloneToolTip;

  chart = null;

  cloneToolTip = null;

  a2a_config = a2a_config || {};

  a2a_config.num_services = 4;

  $(function() {
    var cloneToolTip2, hideShareControls, populateChart, populateChartInternal, remove, removePinnedToolTip, retrieveInProgress, shareClick, shareControlsShowing, slider, validateAll, validateCompany, validateConcept;
    retrieveInProgress = false;
    shareControlsShowing = false;
    Date.prototype.addDays = function(num) {
      var value;
      value = this.valueOf();
      value += 86400000 * num;
      return new Date(value);
    };
    $.ajax({
      url: "/size",
      success: function(numDataPoints) {
        return $('#numDataPoints').text(numDataPoints);
      }
    });
    cloneToolTip = null;
    cloneToolTip2 = null;
    removePinnedToolTip = function() {
      if (cloneToolTip) {
        chart.container.firstChild.removeChild(cloneToolTip);
      }
      if (cloneToolTip2) {
        cloneToolTip2.remove();
      }
      cloneToolTip = null;
      return cloneToolTip2 = null;
    };
    remove = function(arr, itemToRemove) {
      var i, num, ref, results;
      results = [];
      for (num = i = 0, ref = arr.length; 0 <= ref ? i <= ref : i >= ref; num = 0 <= ref ? ++i : --i) {
        if (arr[num] === itemToRemove) {
          results.push(arr.splice(num, 1));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    chart = new Highcharts.Chart({
      chart: {
        renderTo: 'chart-container'
      },
      xAxis: {
        type: 'datetime'
      },
      title: {
        text: 'waiting...'
      },
      exporting: {
        chartOptions: {
          chart: {
            backgroundColor: "#000000"
          }
        }
      },
      tooltip: {
        useHTML: true,
        formatter: function() {
          var renderingDataIndex;
          renderingDataIndex = this.x + "--" + this.y;
          return (new Date(this.x).toDateString()) + ": <b>" + this.y + " " + this.series.renderingData[renderingDataIndex].unit + "</b><br><a style=\"float: left;\" target=\"_blank\" href=\"" + this.series.renderingData[renderingDataIndex].rendering + "\">View Rendering</a><a style=\"float: right;\" target=\"_blank\" href=\"" + this.series.renderingData[renderingDataIndex].xml + "\">View XML</a>";
        }
      },
      plotOptions: {
        line: {
          marker: {
            enabled: true
          }
        },
        series: {
          cursor: 'pointer',
          point: {
            events: {
              click: function() {
                removePinnedToolTip();
                cloneToolTip = this.series.chart.tooltip.label.element.cloneNode(true);
                chart.container.firstChild.appendChild(cloneToolTip);
                cloneToolTip2 = $('.highcharts-tooltip').clone();
                return $(chart.container).append(cloneToolTip2);
              }
            }
          },
          events: {
            legendItemClick: function() {
              displayedSeries[this.shareKey] = this.visible ? "false" : "true";
              hideShareControls();
              return true;
            }
          }
        }
      }
    });
    slider = $('.bxslider').bxSlider({
      infiniteLoop: false,
      controls: false,
      pager: false,
      touchEnabled: false
    });
    hideShareControls = function() {
      if (shareControlsShowing) {
        $("#shareControls").html('<a id="share" href="#" class="btn btn-sm btn-primary" style="width: 100px"><img src="/images/share16.png" style="margin-right: 10px;">Share</a>').on("click", function() {
          return shareClick();
        });
        return shareControlsShowing = false;
      }
    };
    populateChartInternal = function(docs) {
      var addedSeries, chartTitle, displayedSet, el, i, k, len, v;
      if ((docs == null) || docs.length === 0) {
        alert("There doesn't seem to be any data.");
        retrieveInProgress = false;
        return;
      }
      slider.goToSlide(1);
      el = $('#chart-container');
      el.css('width', '100%');
      chartTitle = '';
      for (i = 0, len = displayedSets.length; i < len; i++) {
        displayedSet = displayedSets[i];
        chartTitle += "[" + displayedSet.companyName + "]:" + displayedSet.conceptName + " vs. ";
      }
      chartTitle = chartTitle.substring(0, chartTitle.length - 5);
      chart.setTitle({
        text: chartTitle
      });
      for (k in docs) {
        v = docs[k];
        if (displayedSeries[v.shareKey] == null) {
          displayedSeries[v.shareKey] = "false";
        }
        addedSeries = chart.addSeries({
          data: v.data,
          name: k,
          visible: displayedSeries[v.shareKey] === "true"
        });
        addedSeries.renderingData = v.renderingData;
        addedSeries.shareKey = v.shareKey;
      }
      chart.setSize(el.width(), el.height(), true);
      return $("#externalSliderControls").toggleClass("hiddenElement");
    };
    populateChart = function() {
      var companyName, conceptName, identifier;
      if (retrieveInProgress) {
        return;
      }
      retrieveInProgress = true;
      $('#addSeries').toggleClass('button-ajax-loading');
      identifier = $('#identifier').val();
      companyName = $('#company').val();
      conceptName = $('#concept').val();
      return $.ajax({
        url: "/facts?identifier=" + identifier + "&conceptName=" + conceptName,
        dataType: 'json',
        success: function(docs) {
          var k, v;
          displayedSets.push({
            identifier: identifier,
            companyName: companyName,
            conceptName: conceptName
          });
          for (k in docs) {
            v = docs[k];
            displayedSeries[v.shareKey] = "true";
          }
          return populateChartInternal(docs);
        },
        complete: function() {
          retrieveInProgress = false;
          return $('#addSeries').toggleClass('button-ajax-loading');
        }
      });
    };
    validateConcept = function() {
      if (($('#concept').val() == null) || $('#concept').val() === '') {
        $('#concept').addClass('errorBox');
        return false;
      } else {
        $('#concept').removeClass('errorBox');
        return true;
      }
    };
    validateCompany = function() {
      if (($('#identifier').val() == null) || $('#identifier').val() === '') {
        $('#company').addClass('errorBox');
        return false;
      } else {
        $('#company').removeClass('errorBox');
        return true;
      }
    };
    validateAll = function() {
      return validateCompany() && validateConcept();
    };
    $('.navbar li a').click(function(event) {
      event.preventDefault();
      $($(this).attr('href'))[0].scrollIntoView();
      return scrollBy(0, -50);
    });
    $('#concept').autocomplete({
      delay: 300,
      minLength: 3,
      source: function(req, res) {
        return $.ajax({
          url: '/elements?identifier=' + $('#identifier').val() + '&term=' + req.term,
          dataType: 'json',
          success: function(data) {
            return res(data);
          }
        });
      },
      change: function(e, ui) {
        if (!ui.item) {
          return $('#concept').val('');
        }
      },
      position: {
        my: "center top",
        at: "center bottom",
        of: '#concept'
      }
    });
    $('#company').autocomplete({
      delay: 300,
      source: function(req, res) {
        return $.ajax({
          url: '/companies?term=' + req.term,
          dataType: 'json',
          success: function(data) {
            return res(data);
          }
        });
      },
      select: function(event, ui) {
        event.preventDefault();
        $("#company").val(ui.item.label);
        return $("#identifier").val(ui.item.id);
      },
      focus: function(event, ui) {
        event.preventDefault();
        $("#company").val(ui.item.label);
        return $("#identifier").val(ui.item.id);
      },
      change: function(e, ui) {
        if (!ui.item) {
          $('#identifier').val('');
          return $('#company').val('');
        }
      },
      position: {
        my: "center top",
        at: "center bottom",
        of: '#company'
      }
    });
    shareClick = function() {
      return $.ajax({
        type: "POST",
        url: "/save",
        data: {
          sets: displayedSets,
          series: displayedSeries
        },
        success: (function(id) {
          $("#shareControls").html('<iframe id="shareControls" style="border: none; margin: 0px; padding: 0px; overflow: hidden;" height="26px" width="600px" scrolling="no" seamless="seamless" src="/share/' + id + '"></iframe>');
          return shareControlsShowing = true;
        }),
        dataType: 'text'
      });
    };
    $("#share").on("click", function() {
      return shareClick();
    });
    $("#addAnother").on("click", function() {
      window.facts = null;
      window.history.pushState({
        path: '/'
      }, '', '/');
      $("#externalSliderControls").toggleClass("hiddenElement");
      removePinnedToolTip();
      hideShareControls();
      $("#company").focus();
      return slider.goToSlide(0);
    });
    $("#startOver").on("click", function() {
      window.displayedSets = [];
      window.displayedSeries = {};
      window.facts = null;
      window.history.pushState({
        path: '/'
      }, '', '/');
      removePinnedToolTip();
      chart.setTitle({
        text: 'waiting...'
      });
      while (chart.series.length > 0) {
        chart.series[0].remove(true);
      }
      hideShareControls();
      $("#externalSliderControls").toggleClass("hiddenElement");
      $("#concept").val('');
      $("#company").val('');
      $("#identifier").val('');
      $("#company").focus();
      return slider.goToSlide(0);
    });
    $("#addSeries").on("click", function() {
      if (validateAll()) {
        return populateChart();
      }
    });
    $("#company").focusout(function() {
      return validateCompany();
    });
    $("#concept").focusout(function() {
      return validateConcept();
    });
    if (typeof facts !== "undefined" && facts !== null) {
      return populateChartInternal(facts);
    } else {
      return $('#company').focus();
    }
  });

}).call(this);

//# sourceMappingURL=index.js.map
