// Generated by CoffeeScript 1.9.2
(function() {
  var StatementsController;

  StatementsController = (function() {
    function StatementsController($scope, $http) {
      this.$scope = $scope;
      this.$http = $http;
      this.initialize();
      this.entities = [];
    }

    StatementsController.prototype.addEntity = function() {
      if ((this.selectedEntity != null) && (this.selectedEntity.originalObject != null) && !this.entities.some((function(_this) {
        return function(entity) {
          return entity.id === _this.selectedEntity.originalObject.id;
        };
      })(this))) {
        this.entities.push(this.selectedEntity.originalObject);
        this.initialize();
        return this.showStatements();
      }
    };

    StatementsController.prototype.initialize = function() {
      this.selectedEntity = null;
      this.instantDates = [];
      this.durationDates = [];
      this.instantEntities = [];
      this.durationEntities = [];
      this.bsFacts = {};
      this.isFacts = {};
      this.cfFacts = {};
      this.loading = false;
      return this.loaded = false;
    };

    StatementsController.prototype.startOver = function() {
      this.initialize();
      return this.entities = [];
    };

    StatementsController.prototype.showStatements = function() {
      var entity, identifiers;
      this.$scope.$broadcast('angucomplete-alt:clearInput');
      identifiers = (function() {
        var i, len, ref, results;
        ref = this.entities;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          entity = ref[i];
          results.push(entity.id);
        }
        return results;
      }).call(this);
      this.loading = true;
      return this.$http.post('statementData', {
        entities: identifiers
      }).success((function(_this) {
        return function(data, status, headers, config) {
          var date, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3;
          _this.instantDates = data.instantDates;
          ref = data.instantDates;
          for (i = 0, len = ref.length; i < len; i++) {
            date = ref[i];
            ref1 = _this.entities;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              entity = ref1[j];
              _this.instantEntities.push(entity.value);
            }
          }
          _this.bsFacts = data.bsFacts;
          _this.durationDates = data.durationDates;
          ref2 = data.durationDates;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            date = ref2[k];
            ref3 = _this.entities;
            for (l = 0, len3 = ref3.length; l < len3; l++) {
              entity = ref3[l];
              _this.durationEntities.push(entity.value);
            }
          }
          _this.isFacts = data.isFacts;
          _this.cfFacts = data.cfFacts;
          _this.loading = false;
          return _this.loaded = true;
        };
      })(this));
    };

    return StatementsController;

  })();

  StatementsController.$inject = ["$scope", "$http"];

  angular.module("statementsApp", ["angucomplete-alt"]).controller("StatementsController", StatementsController);

  $(function() {
    $('#bsTableRight').height($('#bsTable').height() + 10);
    $('#isTableRight').height($('#isTable').height() + 10);
    $('#cisTableRight').height($('#cisTable').height() + 10);
    return $('#cfTableRight').height($('#cfTable').height() + 10);
  });

}).call(this);

//# sourceMappingURL=statements.js.map
