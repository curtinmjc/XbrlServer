// Generated by CoffeeScript 1.9.2
(function() {
  var Fact, stream,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Fact = require('../model/Fact').Fact;

  stream = require('stream');

  exports.FactTransformStream = (function(superClass) {
    extend(FactTransformStream, superClass);

    function FactTransformStream() {
      this.facts = [];
      FactTransformStream.__super__.constructor.call(this, {
        objectMode: true
      });
    }

    FactTransformStream.prototype._transform = function(chunk, enc, next) {
      var fact;
      fact = new Fact(chunk.doc);
      if (fact.IsDuration && fact.GetPeriodDescription() === 'other' || fact.IsNil) {
        return next();
      }
      this.facts.push(fact);
      return next();
    };

    FactTransformStream.prototype._flush = function(next) {
      var fact, factHash, facts, hash, i, j, len, len1, ref, seriesCollection, seriesCollectionParsed, seriesDescription;
      factHash = {};
      ref = this.facts;
      for (i = 0, len = ref.length; i < len; i++) {
        fact = ref[i];
        if (!factHash[fact.GetHashValue()]) {
          factHash[fact.GetHashValue()] = fact;
        } else if (factHash[fact.GetHashValue()].FilingDate < fact.FilingDate) {
          factHash[fact.GetHashValue()] = fact;
        } else if (factHash[fact.GetHashValue()].FilingDate === fact.FilingDate && !factHash[fact.GetHashValue()].Amendment && fact.Amendment) {
          factHash[fact.GetHashValue()] = fact;
        }
      }
      seriesCollection = {};
      for (hash in factHash) {
        fact = factHash[hash];
        seriesDescription = fact.GetSeriesDescription();
        if (seriesCollection[seriesDescription] == null) {
          seriesCollection[seriesDescription] = [];
        }
        seriesCollection[seriesDescription].push(fact);
      }
      factHash = null;
      seriesCollectionParsed = {};
      for (seriesDescription in seriesCollection) {
        facts = seriesCollection[seriesDescription];
        facts.sort(function(a, b) {
          return a.GetSortValue(b);
        });
        for (j = 0, len1 = facts.length; j < len1; j++) {
          fact = facts[j];
          if (fact.Value == null) {
            continue;
          }
          if (seriesCollectionParsed[seriesDescription] == null) {
            seriesCollectionParsed[seriesDescription] = {
              data: [],
              renderingData: {}
            };
          }
          seriesCollectionParsed[seriesDescription].data.push([fact.EndDate.getTime(), fact.Value]);
          seriesCollectionParsed[seriesDescription].renderingData[(fact.EndDate.getTime()) + "--" + fact.Value] = {
            rendering: "https://www.sec.gov/cgi-bin/viewer?action=view&cik=" + fact.CIK + "&accession_number=" + fact.AccesssionNumber,
            xml: decodeURIComponent(fact.URL),
            unit: fact.GetUnitDescription()
          };
        }
        seriesCollectionParsed[seriesDescription].shareKey = facts[0].GetSeriesKey();
      }
      this.push(seriesCollectionParsed);
      return next();
    };

    return FactTransformStream;

  })(stream.Transform);

}).call(this);

//# sourceMappingURL=FactTransformStream.js.map
