// Generated by CoffeeScript 1.9.2
(function() {
  var Fact, stream,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  stream = require('stream');

  Fact = require('../model/Fact').Fact;

  exports.CsvRowStream = (function(superClass) {
    extend(CsvRowStream, superClass);

    function CsvRowStream(dimensions) {
      this.dimensions = dimensions;
      CsvRowStream.__super__.constructor.call(this, {
        objectMode: true
      });
    }

    CsvRowStream.prototype._transform = function(chunk, enc, next) {
      var i, j, member, ref, rowString;
      rowString = chunk["http://www.xbrl.org/2003/instance/Entity"] + ',' + chunk["http://www.xbrl.org/2003/instance/Concept"] + ',' + chunk["http://www.xbrl.org/2003/instance/Period"] + ',' + chunk["http://www.xbrl.org/2003/instance/Unit"] + ',' + chunk["http://www.w3.org/2001/XMLSchema-instance/nil"] + ',' + chunk["http://www.xbrl.org/2003/instance/Value"] + ',';
      if (chunk["http://www.xbrl.org/2003/instance/Decimals"] != null) {
        rowString += chunk["http://www.xbrl.org/2003/instance/Decimals"] + ',';
      }
      if (chunk["http://www.xbrl.org/2003/instance/Precision"] != null) {
        rowString += chunk["http://www.xbrl.org/2003/instance/Precision"] + ',';
      }
      rowString += chunk["http://www.sec.gov/Archives/edgar/companyName"] + ',' + chunk["http://www.sec.gov/Archives/edgar/filingDate"] + ',' + chunk["http://www.sec.gov/Archives/edgar/accessionNumber"] + ',' + chunk["http://www.sec.gov/Archives/edgar/fileNumber"] + ',' + chunk["http://www.sec.gov/Archives/edgar/url"] + ',' + chunk["http://xbrl.sec.gov/Amendment"] + ',' + chunk["http://xbrl.sec.gov/FiscalYear"] + ',' + chunk["http://xbrl.sec.gov/FiscalPeriod"];
      if (this.dimensions.length > 0) {
        rowString += ',';
        if (this.dimensions.length > 1) {
          for (i = j = 0, ref = this.dimensions.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            member = chunk[this.dimensions[i]];
            rowString += member != null ? member + "," : ",";
          }
        }
        rowString += chunk[this.dimensions.length - 1] != null ? chunk[this.dimensions.length - 1] + "\n" : "\n";
      } else {
        rowString += "\n";
      }
      this.push(rowString);
      return next();
    };

    return CsvRowStream;

  })(stream.Transform);

}).call(this);

//# sourceMappingURL=CsvRowStream.js.map
